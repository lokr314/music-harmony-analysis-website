---
let id: number = 5
let company: string = 'Traversy Media'
let isPublished: boolean = true
let x: any = 'Hello' // can be any type

// Array
let ids: number[] = [1, 2, 3, 4, 5]
let arr: any[] = [1, true, 'Hello']

// Tuple
let person: [number, string, boolean] = [1, 'Brad', true]

// Tuple Array
let employee: [number, string][]
employee = [[1, 'Brad'], [2, 'John'], [3, 'Jill']]

// Union
let pid: string | number = 22

// Enum, normally values start at 0
enum Direction1 {
  Up = 1, // 1
  Down,   // 2
  Left,   // 3
  Right   // 4
}

enum Direction2 {
  Up = 'Up', // Up
  Down = 'Down',   // Down
  Left = 'Left',   // Left
  Right = 'Right'   // Right
}

// Objects
type User = {
  id: number,
  name: string
}

const user: User = {
  id: 1,
  name: 'John'
}

// Type Assertion
let cid: any = 1
// let customerId = <number>cid // not possible in astro
// or
let customerId2 = cid as number

// Functions
function addNum(x: number, y: number): number {
  return x + y
}

// Void
function log(message: string | number): void {
  console.log(message)
}

// Interfaces, do not work with unions
interface UserInterface {
  readonly id: number, // can't be changed
  name: string,
  age?: number // optional
}

const user1: UserInterface = {
  id: 1,
  name: 'John'
}

interface MathFunc {
  (x: number, y: number): number
}

const add: MathFunc = (x: number, y: number): number => x + y

// Classes

// 2.
interface PersonInterface {
  id: number,
  name: string,
  register(): string
}

// 1.
class Person implements PersonInterface {
   id: number
  name: string

  constructor(id: number, name: string) {
    this.id = id
    this.name = name
  }

  register() {
    return `${this.name} is now registered`
  }
}

const brad = new Person(1, 'Brad Traversy')
const mike = new Person(2, 'Mike Jordan')

// Subclasses
 class Employee extends Person {
  position: string

  constructor(id: number, name: string, position: string) {
    super(id, name)
    this.position = position
  }
}

const emp = new Employee(3, 'Shawn', 'Developer')


// Generics

function getArray<T>(items: T[]): T[] {
  return new Array().concat(items)
}

let numArray = getArray<number>([1, 2, 3, 4])
let strArray = getArray<string>(['brad', 'john', 'jill'])

numArray.push(5)
// strArray.push(5) // error
// strArray.push(false) // error
---