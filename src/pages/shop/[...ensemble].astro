---
import BaseLayout from "../../layouts/BaseLayout.astro";


// Ensemble-Unterseiten werden generiert
export async function getStaticPaths() {
}

const { page, title, ensembleType } = Astro.props;
const params = Astro.params;

console.log(params);

var ensemble = ensembleType
if (ensemble == undefined) {
  ensemble = "";
}

console.log(page);
---

<script>
  //const urlSearchParams = new URLSearchParams(window.location.search);
  //const urlParams = Object.fromEntries(urlSearchParams.entries());
  // console.log(urlParams);
  
  // Im HTML-Code gibt es zwei divs für den gesamten Shopinhalt einer Seite: Einmal HTML und einmal eine JS-lastige Vue-Komponente.
  // Die statische HTML-Seiten werden für SEO und Performance generiert. (Die Seiten werden paginiert)
  // Die Vue-Komponente wird für gleichzeitige Filterung und Paginierung benötigt. Man will nicht für alle möglichen Filterparameterkombinationen einige statische Seiten mit der richtigen Paginierung generieren.
  // Idee: Beides reinpacken und das unsichtbar machen, das nicht da sein soll
  // Wenn keine Parameter angegeben sind, wird die statische Astro-Komponente angezeigt, sonst die JS-lastige Vue-Komponente

  // Wenn nichtstatische Seite, soll Paginierung egal sein, Paginierung wird von nichtstatischer Seite gesteuert.
  // Es wäre aber trotzdem möglich, z.B. /shop/klavier/2?filter=bla zu haben, wäre aber die gleiche Seite wie /shop/klavier?filter=bla
  // Ob das so gut ist, ist eine andere Frage
  //if (Object.keys(urlParams).length > 0) {
  //  document.getElementById('staticProductPage').style.display = 'none';
  //  //document.getElementById('vueProductPage').style.display = 'block';
  //  document.getElementById('filterProductPage').style.display = 'block';
  //}
</script>


<BaseLayout title={title}>
  <div class="text-center">Ensemble: {title}</div>
  <div id="products">
  </div>
</BaseLayout>