---
import ProductEnsembleView from "../../components/ProductEnsembleView.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";

export async function getStaticPaths() {
    const response = await fetch('https://notenentwickler.com/api/ensembles?populate=*').then((res) => res.json());
    
    return response.data.map((ensemble) => {
        return {
            params: { ensembleURL: ensemble.attributes.name },
            props: { ensemble },
        };
    });
}

const { ensemble } = Astro.props;

const ensembleProducts = ensemble.attributes.products.data
console.log(ensembleProducts)
--- 

<script>
    // 4 Stellen f端r einen neuen Filter:
    //1. FilterHTMLElement holen
    //2. In listOfFilters hinzuf端gen
    //3. Im FilterState hinzuf端gen
    //4. Beim Filtern von "these" hinzuf端gen

    const modeFilter = document.getElementById('modeFilter')
    const lengthFilter = document.getElementById('lengthFilter')

    var listOfFilters = [
    {
        name: "mode",
        filter: modeFilter,
        filterValue: "all"  //default
    },
    {
        name: "length",
        filter: lengthFilter,
        filterValue: "all"
    }
    ]

    listOfFilters.forEach(filterSpec => {
    
        filterSpec.filter.addEventListener('change', event => {
            filterSpec.filterValue = event.target.value //angezeigter Fehler hier ist falsch, funktioniert trotzdem
            const items = Array.from(document.querySelectorAll('.item'))

            const filterState = {
            mode: listOfFilters.find(f => f.name === "mode").filterValue,
            length: listOfFilters.find(f => f.name === "length").filterValue
            }

            //filter all products that fulfill all specified (not having the value "all") filters
            const these = items.filter(item => //angezeigte Fehler hier sind falsch, funktioniert trotzdem
                                        (item.dataset.mode === filterState.mode || filterState.mode === "all") &&
                                        (item.dataset.length === filterState.length || filterState.length === "all")
                                        )

            const others = items.filter(item => !these.includes(item))

            these.forEach(item => item.classList.remove('hidden'))
            others.forEach(item => item.classList.add('hidden'))
            //}
        })
    })
</script>

<BaseLayout title={ensemble}>
    <div class="text-center">Ensemble: {ensemble}</div>
    <div id="products" class="app flex flex-col w-full justify-center">
        <div class="toolbar flex justify-start bg-gray-900 h-16 text-white py-2 px-8">
            <div class="mx-8">
                <h2 class="font-bold text-center">Mode:</h2>
                <select id="modeFilter" class="bg-gray-600 text-white border border-gray-400 py-1 px-2 rounded">
                <option value="all">Kein Filter</option>
                <option value="dur">Dur</option>
                <option value="moll">Moll</option>
                </select>
            </div>
            <div>
                <h2 class="font-bold text-center">Length:</h2>
                <select id="lengthFilter" class="bg-gray-600 text-white border border-gray-400 py-1 px-2 rounded">
                <option value="all">Kein Filter</option>
                <option value="lang">Lang</option>
                <option value="kurz">Kurz</option>
                </select>
            </div>
        </div>

        <div class="content flex flex-row flex-wrap gap-4 p-8">
            {ensembleProducts.map((product) => (
                <ProductEnsembleView product={product.attributes} />
            ))}
        </div>            
    </div>
</BaseLayout>